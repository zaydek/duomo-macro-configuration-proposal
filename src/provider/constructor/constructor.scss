@use "sass:list";
@use "sass:map";
@use "sass:math";

@use "../helpers" as *;

@function to-list($opts) {
	// prettier-ignore
	$ret: if(
		type-of($opts) == "map",
		($opts,),
		$opts,
	);
	@return $ret;
}

// Ex:
//
// (0, 0.5, 1)  -> true
// (0, 50, 100) -> false
//
@function conv-percent($type, $range) {
	$ok: $type == range and type-of(list.nth($range, 1)) == "number" and list.nth($range, 1) >= 0 and
		type-of(list.nth($range, -1)) == "number" and list.nth($range, -1) <= 1;
	@return $ok;
}

// Ex:
//
// abs("Hello, world!") -> "Hello, world!"
// abs(-42)             -> 42
// abs(42)              -> 42
//
@function abs($any) {
	@if type-of($any) == "number" {
		@return math.abs($any);
	}
	@return $any;
}

@mixin constructor($opts) {
	@each $opt in to-list($opts) {
		// prettier-ignore
		$shorthand: if(
			map.get($opt, shorthand) == none,
			map.get($opt, property),
			map.get($opt, shorthand),
		);
		$property: map.get($opt, property);
		$type: map.get($opt, type);
		$range: map.get($opt, range);
		$resolver: map.get($opt, resolver);
		$breakpoints: map.get($opt, breakpoints);
		$variants: map.get($opt, variants);

		// Computed:
		$percent: conv-percent($type, $range);

		@if $type == range {
			@each $rv in $range {
				#{amp()}#{n($rv)}#{$shorthand}-#{code-name(abs(if($percent, $rv * 100, $rv)))} {
					@each $prop in $property {
						#{$prop}: resolve($rv, $resolver);
					}
				}
			}
			@if list.index($variants, responsive) {
				@each $key, $n in breakpoints() {
					@media (min-width: px($n)) {
						@each $rv in $range {
							#{amp()}#{n($rv)}#{$shorthand}-#{code-name(abs(if($percent, $rv * 100, $rv)))} {
								@each $prop in $property {
									#{$prop}: resolve($rv, $resolver);
								}
							}
						}
					}
				}
			}
		}
	}
}
