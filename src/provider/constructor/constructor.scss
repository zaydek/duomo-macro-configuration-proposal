@use "sass:list";
@use "sass:map";
@use "sass:math";

@use "../helpers" as *;

@function to-array($opts) {
	// prettier-ignore
	$ret: if(
		type-of($opts) == "map",
		($opts,),
		$opts,
	);
	@return $ret;
}

@function conv-percent($type, $range) {
	$ok: $type == range and type-of(list.nth($range, 1)) == "number" and list.nth($range, 1) >= 0 and
		type-of(list.nth($range, -1)) == "number" and list.nth($range, -1) <= 1;
	@return $ok;
}

@function abs($any) {
	@if type-of($any) == "number" {
		@return math.abs($any);
	}
	@return $any;
}

@mixin constructor($opts) {
	@each $opt in to-array($opts) {
		// prettier-ignore
		$shorthand: if(
			map.get($opt, shorthand) == none,
			map.get($opt, property),
			map.get($opt, shorthand),
		);
		$property: map.get($opt, property);
		$type: map.get($opt, type);
		$range: map.get($opt, range);
		$resolver: map.get($opt, resolver);
		$breakpoints: map.get($opt, breakpoints);
		$pseudos: map.get($opt, pseudos);

		// Computed:
		$percent: conv-percent($type, $range);

		// TODO
		@if $type == range {
			@each $rv in $range {
				#{amp()}#{n($rv)}#{$shorthand}-#{code-name(abs(if($percent, $rv * 100, $rv)))} {
					@each $prop in $property {
						#{$prop}: resolve($rv, $resolver);
					}
				}
			}
		}
	}
}
