@use "sass:list";
@use "sass:map";

@use "../helpers" as *;
@use "mixins";

@function to-list($opts) {
	// prettier-ignore
	$ret: if(
		type-of($opts) == "map",
		($opts,),
		$opts,
	);
	@return $ret;
}

// Ex:
//
// (0, 0.5, 1)  -> true
// (0, 50, 100) -> false
//
@function use-percent-heuristic($range) {
	$ok: $range and type-of(list.nth($range, 1)) == "number" and list.nth($range, 1) >= 0 and
		type-of(list.nth($range, -1)) == "number" and list.nth($range, -1) <= 1;
	@return $ok;
}

@mixin constructor($opts) {
	@each $opt in to-list($opts) {
		// prettier-ignore
		$shorthand: if(
			map.get($opt, shorthand) == none,
			map.get($opt, property),
			map.get($opt, shorthand),
		);
		$property: map.get($opt, property);
		$range: map.get($opt, range);
		$resolver: map.get($opt, resolver);
		$breakpoints: map.get($opt, breakpoints);
		$variants: map.get($opt, variants);

		// Computed:
		$use-percent: use-percent-heuristic($range);

		@if $range {
			// .a { ... }
			@each $rv in $range {
				.#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
					@each $prop in $property {
						#{$prop}: resolve($rv, $resolver);
					}
				}
			}
			// .hover\:a:hover { ... }
			// .group-hover:hover .a { ... }
			@if list.index($variants, hover) {
				@each $rv in $range {
					.#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
						@include mixins.hover {
							@each $prop in $property {
								#{$prop}: resolve($rv, $resolver);
							}
						}
					}
				}
				@each $rv in $range {
					.#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
						@include mixins.group-hover {
							@each $prop in $property {
								#{$prop}: resolve($rv, $resolver);
							}
						}
					}
				}
			}
			// .focus\:a:focus { ... }
			// .group-focus:focus .a { ... }
			@if list.index($variants, focus) {
				@each $rv in $range {
					.#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
						@include mixins.focus {
							@each $prop in $property {
								#{$prop}: resolve($rv, $resolver);
							}
						}
					}
				}
				@each $rv in $range {
					.#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
						@include mixins.group-focus {
							@each $prop in $property {
								#{$prop}: resolve($rv, $resolver);
							}
						}
					}
				}
			}
			// @media (min-width: ...) { .sm\:a { ... } }
			@if list.index($variants, responsive) {
				@include mixins.responsive {
					@each $rv in $range {
						&#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
							@each $prop in $property {
								#{$prop}: resolve($rv, $resolver);
							}
						}
					}
				}
			}
		}
	}
}
