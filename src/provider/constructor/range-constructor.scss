@use "sass:list";
@use "sass:map";

@use "../helpers" as *;
@use "mixins" as *;

// Ex:
//
// (0, 0.5, 1)  -> true
// (0, 50, 100) -> false
//
@function use-percent-heuristic($range) {
	// prettier-ignore
	$ok: $range and
		type-of(list.nth($range, 1)) == "number" and
		list.nth($range, 1) >= 0 and
		type-of(list.nth($range, -1)) == "number" and
		list.nth($range, -1) <= 1;
	@return $ok;
}

@mixin range-based($range-opt) {
	// NOTE: $shorthand cannot be `none` for `range-based`.
	//
	// prettier-ignore
	$shorthand: if(
		map.get($range-opt, shorthand) == none,
		map.get($range-opt, property),  // Defer to $property
		map.get($range-opt, shorthand), // Defer to $shorthand
	);
	$property: map.get($range-opt, property);
	$range: map.get($range-opt, range);
	$resolver: map.get($range-opt, resolver);
	$breakpoints: map.get($range-opt, breakpoints);
	$variants: map.get($range-opt, variants);

	// Computed:
	$use-percent: use-percent-heuristic($range);

	// .a { ... }
	@each $rv in $range {
		.#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
			@each $prop in $property {
				#{$prop}: resolve($rv, $resolver);
			}
		}
	}
	// .hover\:a:hover { ... }
	// .group-hover:hover .a { ... }
	@if list.index($variants, hover) {
		@each $rv in $range {
			.#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
				@include hover {
					@each $prop in $property {
						#{$prop}: resolve($rv, $resolver);
					}
				}
			}
		}
		@each $rv in $range {
			.#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
				@include group-hover {
					@each $prop in $property {
						#{$prop}: resolve($rv, $resolver);
					}
				}
			}
		}
	}
	// .focus\:a:focus { ... }
	// .group-focus:focus .a { ... }
	@if list.index($variants, focus) {
		@each $rv in $range {
			.#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
				@include focus {
					@each $prop in $property {
						#{$prop}: resolve($rv, $resolver);
					}
				}
			}
		}
		@each $rv in $range {
			.#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
				@include group-focus {
					@each $prop in $property {
						#{$prop}: resolve($rv, $resolver);
					}
				}
			}
		}
	}
	// @media (min-width: ...) { .sm\:a { ... } }
	@if list.index($variants, responsive) {
		@include responsive {
			@each $rv in $range {
				&#{n($rv)}#{$shorthand}-#{desc(abs($rv), $use-percent)} {
					@each $prop in $property {
						#{$prop}: resolve($rv, $resolver);
					}
				}
			}
		}
	}
}
