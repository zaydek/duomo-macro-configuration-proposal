@use "_variants" as *;
@use "../helpers" as *;

// prettier-ignore
@mixin generate-from-range($info-map) {
	$ctx:       map-get($info-map, ctx);
	$pseudo:    map-get($info-map, pseudo);
	$shorthand: map-get($info-map, shorthand);
	$property:  map-get($info-map, property);
	$range:     map-get($info-map, range);
	$resolver:  map-get($info-map, resolver);

	@each $rv in $range {
		#{$ctx}#{n($rv)}#{$shorthand}-#{desc(abs($rv))}#{$pseudo} {
			@each $prop in $property {
				#{$prop}: resolve($rv, $resolver);
			}
		}
	}
}

@mixin margin($variants...) {
	// prettier-ignore
	@include variants($variants) using ($ctx, $pseudo) {
		@include generate-from-range((
			ctx: $ctx,
			pseudo: $pseudo,
			shorthand: m,
			property: margin,
			range: var-join(nrange(), auto, range()),
			resolver: rem,
		));
		@include generate-from-range((
			ctx: $ctx,
			pseudo: $pseudo,
			shorthand: mx,
			property: (margin-left, margin-right),
			range: var-join(nrange(), auto, range()),
			resolver: rem,
		));
		@include generate-from-range((
			ctx: $ctx,
			pseudo: $pseudo,
			shorthand: my,
			property: (margin-top, margin-bottom),
			range: var-join(nrange(), auto, range()),
			resolver: rem,
		));
		@include generate-from-range((
			ctx: $ctx,
			pseudo: $pseudo,
			shorthand: mt,
			property: margin-top,
			range: var-join(nrange(), auto, range()),
			resolver: rem,
		));
		@include generate-from-range((
			ctx: $ctx,
			pseudo: $pseudo,
			shorthand: mr,
			property: margin-right,
			range: var-join(nrange(), auto, range()),
			resolver: rem,
		));
		@include generate-from-range((
			ctx: $ctx,
			pseudo: $pseudo,
			shorthand: mb,
			property: margin-bottom,
			range: var-join(nrange(), auto, range()),
			resolver: rem,
		));
		@include generate-from-range((
			ctx: $ctx,
			pseudo: $pseudo,
			shorthand: ml,
			property: margin-left,
			range: var-join(nrange(), auto, range()),
			resolver: rem,
		));
	}
}
