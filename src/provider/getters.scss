@use "sass:map";

@use "configuration";
@use "escapers";
@use "resolvers";

// Ex:
//
// n(-1) -> "-"
// n(0) -> ""
//
@function n($rv) {
	@if resolvers.passthrough($rv) {
		@return "";
	}
	@return if($rv < 0, "-", "");
}

// Ex:
//
// amp() -> .name { ... }
// .sm\: { amp() } -> .sm:name { ... }
//
@function amp() {
	@if not & {
		@return ".";
	}
	@return & + delimiter();
}

@function delimiter() {
	@return escapers.escape(configuration.$delimiter);
}

// TODO: Should this be configurable?
// TODO: Add support for `%`, etc.
//
@function ident($any) {
	@if $any == 100% {
		@return "max";
	} @else if $any == 100vw or $any == 100vh {
		@return "screen";
	}
	@return $any;
}

// Ex: nrange() -> (-1, -2, -4, -8, ...);
@function nrange() {
	@return configuration.$nrange;
}

// Ex: range() -> (0, 1, 2, 4, 8, ...);
@function range() {
	@return configuration.$range;
}

// Ex:
//
// breakpoint(xs) -> 512
// breakpoint(sm) -> 640
//
// TODO: Make sure supports `sm` and `"sm"` use-case.
@function breakpoint($key) {
	$got: map.get(configuration.$breakpoint-map, $key);
	@if not $got {
		@error "breakpoints: no such key; key=#{$key}";
	}
	@return $got;
}

// Ex:
//
// breakpoints()
// -> (
// ->   "xs\:": 512,
// ->   "sm\:": 640,
// ->   ...
// -> )
//
@function breakpoints() {
	$map: ();
	@each $key, $n in configuration.$breakpoint-map {
		$map: map.set($map, escapers.escape-breakpoint-key($key), $n);
	}
	@return $map;
}
